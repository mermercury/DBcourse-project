// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package mysql

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Back_End/model"
)

func newDepartment(db *gorm.DB, opts ...gen.DOOption) department {
	_department := department{}

	_department.departmentDo.UseDB(db, opts...)
	_department.departmentDo.UseModel(&model.Department{})

	tableName := _department.departmentDo.TableName()
	_department.ALL = field.NewAsterisk(tableName)
	_department.DepartmentID = field.NewUint(tableName, "department_id")
	_department.DepartmentName = field.NewString(tableName, "department_name")
	_department.MajorCount = field.NewInt(tableName, "major_count")
	_department.TeacherCount = field.NewInt(tableName, "teacher_count")

	_department.fillFieldMap()

	return _department
}

type department struct {
	departmentDo

	ALL            field.Asterisk
	DepartmentID   field.Uint
	DepartmentName field.String
	MajorCount     field.Int
	TeacherCount   field.Int

	fieldMap map[string]field.Expr
}

func (d department) Table(newTableName string) *department {
	d.departmentDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d department) As(alias string) *department {
	d.departmentDo.DO = *(d.departmentDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *department) updateTableName(table string) *department {
	d.ALL = field.NewAsterisk(table)
	d.DepartmentID = field.NewUint(table, "department_id")
	d.DepartmentName = field.NewString(table, "department_name")
	d.MajorCount = field.NewInt(table, "major_count")
	d.TeacherCount = field.NewInt(table, "teacher_count")

	d.fillFieldMap()

	return d
}

func (d *department) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *department) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["department_id"] = d.DepartmentID
	d.fieldMap["department_name"] = d.DepartmentName
	d.fieldMap["major_count"] = d.MajorCount
	d.fieldMap["teacher_count"] = d.TeacherCount
}

func (d department) clone(db *gorm.DB) department {
	d.departmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d department) replaceDB(db *gorm.DB) department {
	d.departmentDo.ReplaceDB(db)
	return d
}

type departmentDo struct{ gen.DO }

type IDepartmentDo interface {
	gen.SubQuery
	Debug() IDepartmentDo
	WithContext(ctx context.Context) IDepartmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDepartmentDo
	WriteDB() IDepartmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDepartmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDepartmentDo
	Not(conds ...gen.Condition) IDepartmentDo
	Or(conds ...gen.Condition) IDepartmentDo
	Select(conds ...field.Expr) IDepartmentDo
	Where(conds ...gen.Condition) IDepartmentDo
	Order(conds ...field.Expr) IDepartmentDo
	Distinct(cols ...field.Expr) IDepartmentDo
	Omit(cols ...field.Expr) IDepartmentDo
	Join(table schema.Tabler, on ...field.Expr) IDepartmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDepartmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDepartmentDo
	Group(cols ...field.Expr) IDepartmentDo
	Having(conds ...gen.Condition) IDepartmentDo
	Limit(limit int) IDepartmentDo
	Offset(offset int) IDepartmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDepartmentDo
	Unscoped() IDepartmentDo
	Create(values ...*model.Department) error
	CreateInBatches(values []*model.Department, batchSize int) error
	Save(values ...*model.Department) error
	First() (*model.Department, error)
	Take() (*model.Department, error)
	Last() (*model.Department, error)
	Find() ([]*model.Department, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Department, err error)
	FindInBatches(result *[]*model.Department, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Department) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDepartmentDo
	Assign(attrs ...field.AssignExpr) IDepartmentDo
	Joins(fields ...field.RelationField) IDepartmentDo
	Preload(fields ...field.RelationField) IDepartmentDo
	FirstOrInit() (*model.Department, error)
	FirstOrCreate() (*model.Department, error)
	FindByPage(offset int, limit int) (result []*model.Department, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDepartmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d departmentDo) Debug() IDepartmentDo {
	return d.withDO(d.DO.Debug())
}

func (d departmentDo) WithContext(ctx context.Context) IDepartmentDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d departmentDo) ReadDB() IDepartmentDo {
	return d.Clauses(dbresolver.Read)
}

func (d departmentDo) WriteDB() IDepartmentDo {
	return d.Clauses(dbresolver.Write)
}

func (d departmentDo) Session(config *gorm.Session) IDepartmentDo {
	return d.withDO(d.DO.Session(config))
}

func (d departmentDo) Clauses(conds ...clause.Expression) IDepartmentDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d departmentDo) Returning(value interface{}, columns ...string) IDepartmentDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d departmentDo) Not(conds ...gen.Condition) IDepartmentDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d departmentDo) Or(conds ...gen.Condition) IDepartmentDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d departmentDo) Select(conds ...field.Expr) IDepartmentDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d departmentDo) Where(conds ...gen.Condition) IDepartmentDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d departmentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDepartmentDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d departmentDo) Order(conds ...field.Expr) IDepartmentDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d departmentDo) Distinct(cols ...field.Expr) IDepartmentDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d departmentDo) Omit(cols ...field.Expr) IDepartmentDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d departmentDo) Join(table schema.Tabler, on ...field.Expr) IDepartmentDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d departmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDepartmentDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d departmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IDepartmentDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d departmentDo) Group(cols ...field.Expr) IDepartmentDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d departmentDo) Having(conds ...gen.Condition) IDepartmentDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d departmentDo) Limit(limit int) IDepartmentDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d departmentDo) Offset(offset int) IDepartmentDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d departmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDepartmentDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d departmentDo) Unscoped() IDepartmentDo {
	return d.withDO(d.DO.Unscoped())
}

func (d departmentDo) Create(values ...*model.Department) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d departmentDo) CreateInBatches(values []*model.Department, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d departmentDo) Save(values ...*model.Department) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d departmentDo) First() (*model.Department, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Department), nil
	}
}

func (d departmentDo) Take() (*model.Department, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Department), nil
	}
}

func (d departmentDo) Last() (*model.Department, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Department), nil
	}
}

func (d departmentDo) Find() ([]*model.Department, error) {
	result, err := d.DO.Find()
	return result.([]*model.Department), err
}

func (d departmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Department, err error) {
	buf := make([]*model.Department, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d departmentDo) FindInBatches(result *[]*model.Department, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d departmentDo) Attrs(attrs ...field.AssignExpr) IDepartmentDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d departmentDo) Assign(attrs ...field.AssignExpr) IDepartmentDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d departmentDo) Joins(fields ...field.RelationField) IDepartmentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d departmentDo) Preload(fields ...field.RelationField) IDepartmentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d departmentDo) FirstOrInit() (*model.Department, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Department), nil
	}
}

func (d departmentDo) FirstOrCreate() (*model.Department, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Department), nil
	}
}

func (d departmentDo) FindByPage(offset int, limit int) (result []*model.Department, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d departmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d departmentDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d departmentDo) Delete(models ...*model.Department) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *departmentDo) withDO(do gen.Dao) *departmentDo {
	d.DO = *do.(*gen.DO)
	return d
}
