// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package mysql

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Back_End/model"
)

func newCourseSelect(db *gorm.DB, opts ...gen.DOOption) courseSelect {
	_courseSelect := courseSelect{}

	_courseSelect.courseSelectDo.UseDB(db, opts...)
	_courseSelect.courseSelectDo.UseModel(&model.CourseSelect{})

	tableName := _courseSelect.courseSelectDo.TableName()
	_courseSelect.ALL = field.NewAsterisk(tableName)
	_courseSelect.CourseSelectID = field.NewUint(tableName, "course_select_id")
	_courseSelect.StudentID = field.NewUint(tableName, "student_id")
	_courseSelect.CourseID = field.NewUint(tableName, "course_id")
	_courseSelect.CourseScore = field.NewInt(tableName, "course_score")
	_courseSelect.EvaluateScore = field.NewInt(tableName, "evaluate_score")
	_courseSelect.Evaluation = field.NewString(tableName, "evaluation")

	_courseSelect.fillFieldMap()

	return _courseSelect
}

type courseSelect struct {
	courseSelectDo

	ALL            field.Asterisk
	CourseSelectID field.Uint
	StudentID      field.Uint
	CourseID       field.Uint
	CourseScore    field.Int
	EvaluateScore  field.Int
	Evaluation     field.String

	fieldMap map[string]field.Expr
}

func (c courseSelect) Table(newTableName string) *courseSelect {
	c.courseSelectDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c courseSelect) As(alias string) *courseSelect {
	c.courseSelectDo.DO = *(c.courseSelectDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *courseSelect) updateTableName(table string) *courseSelect {
	c.ALL = field.NewAsterisk(table)
	c.CourseSelectID = field.NewUint(table, "course_select_id")
	c.StudentID = field.NewUint(table, "student_id")
	c.CourseID = field.NewUint(table, "course_id")
	c.CourseScore = field.NewInt(table, "course_score")
	c.EvaluateScore = field.NewInt(table, "evaluate_score")
	c.Evaluation = field.NewString(table, "evaluation")

	c.fillFieldMap()

	return c
}

func (c *courseSelect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *courseSelect) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["course_select_id"] = c.CourseSelectID
	c.fieldMap["student_id"] = c.StudentID
	c.fieldMap["course_id"] = c.CourseID
	c.fieldMap["course_score"] = c.CourseScore
	c.fieldMap["evaluate_score"] = c.EvaluateScore
	c.fieldMap["evaluation"] = c.Evaluation
}

func (c courseSelect) clone(db *gorm.DB) courseSelect {
	c.courseSelectDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c courseSelect) replaceDB(db *gorm.DB) courseSelect {
	c.courseSelectDo.ReplaceDB(db)
	return c
}

type courseSelectDo struct{ gen.DO }

type ICourseSelectDo interface {
	gen.SubQuery
	Debug() ICourseSelectDo
	WithContext(ctx context.Context) ICourseSelectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICourseSelectDo
	WriteDB() ICourseSelectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICourseSelectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICourseSelectDo
	Not(conds ...gen.Condition) ICourseSelectDo
	Or(conds ...gen.Condition) ICourseSelectDo
	Select(conds ...field.Expr) ICourseSelectDo
	Where(conds ...gen.Condition) ICourseSelectDo
	Order(conds ...field.Expr) ICourseSelectDo
	Distinct(cols ...field.Expr) ICourseSelectDo
	Omit(cols ...field.Expr) ICourseSelectDo
	Join(table schema.Tabler, on ...field.Expr) ICourseSelectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICourseSelectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICourseSelectDo
	Group(cols ...field.Expr) ICourseSelectDo
	Having(conds ...gen.Condition) ICourseSelectDo
	Limit(limit int) ICourseSelectDo
	Offset(offset int) ICourseSelectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICourseSelectDo
	Unscoped() ICourseSelectDo
	Create(values ...*model.CourseSelect) error
	CreateInBatches(values []*model.CourseSelect, batchSize int) error
	Save(values ...*model.CourseSelect) error
	First() (*model.CourseSelect, error)
	Take() (*model.CourseSelect, error)
	Last() (*model.CourseSelect, error)
	Find() ([]*model.CourseSelect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CourseSelect, err error)
	FindInBatches(result *[]*model.CourseSelect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CourseSelect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICourseSelectDo
	Assign(attrs ...field.AssignExpr) ICourseSelectDo
	Joins(fields ...field.RelationField) ICourseSelectDo
	Preload(fields ...field.RelationField) ICourseSelectDo
	FirstOrInit() (*model.CourseSelect, error)
	FirstOrCreate() (*model.CourseSelect, error)
	FindByPage(offset int, limit int) (result []*model.CourseSelect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICourseSelectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c courseSelectDo) Debug() ICourseSelectDo {
	return c.withDO(c.DO.Debug())
}

func (c courseSelectDo) WithContext(ctx context.Context) ICourseSelectDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c courseSelectDo) ReadDB() ICourseSelectDo {
	return c.Clauses(dbresolver.Read)
}

func (c courseSelectDo) WriteDB() ICourseSelectDo {
	return c.Clauses(dbresolver.Write)
}

func (c courseSelectDo) Session(config *gorm.Session) ICourseSelectDo {
	return c.withDO(c.DO.Session(config))
}

func (c courseSelectDo) Clauses(conds ...clause.Expression) ICourseSelectDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c courseSelectDo) Returning(value interface{}, columns ...string) ICourseSelectDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c courseSelectDo) Not(conds ...gen.Condition) ICourseSelectDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c courseSelectDo) Or(conds ...gen.Condition) ICourseSelectDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c courseSelectDo) Select(conds ...field.Expr) ICourseSelectDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c courseSelectDo) Where(conds ...gen.Condition) ICourseSelectDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c courseSelectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICourseSelectDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c courseSelectDo) Order(conds ...field.Expr) ICourseSelectDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c courseSelectDo) Distinct(cols ...field.Expr) ICourseSelectDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c courseSelectDo) Omit(cols ...field.Expr) ICourseSelectDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c courseSelectDo) Join(table schema.Tabler, on ...field.Expr) ICourseSelectDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c courseSelectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICourseSelectDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c courseSelectDo) RightJoin(table schema.Tabler, on ...field.Expr) ICourseSelectDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c courseSelectDo) Group(cols ...field.Expr) ICourseSelectDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c courseSelectDo) Having(conds ...gen.Condition) ICourseSelectDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c courseSelectDo) Limit(limit int) ICourseSelectDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c courseSelectDo) Offset(offset int) ICourseSelectDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c courseSelectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICourseSelectDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c courseSelectDo) Unscoped() ICourseSelectDo {
	return c.withDO(c.DO.Unscoped())
}

func (c courseSelectDo) Create(values ...*model.CourseSelect) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c courseSelectDo) CreateInBatches(values []*model.CourseSelect, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c courseSelectDo) Save(values ...*model.CourseSelect) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c courseSelectDo) First() (*model.CourseSelect, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSelect), nil
	}
}

func (c courseSelectDo) Take() (*model.CourseSelect, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSelect), nil
	}
}

func (c courseSelectDo) Last() (*model.CourseSelect, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSelect), nil
	}
}

func (c courseSelectDo) Find() ([]*model.CourseSelect, error) {
	result, err := c.DO.Find()
	return result.([]*model.CourseSelect), err
}

func (c courseSelectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CourseSelect, err error) {
	buf := make([]*model.CourseSelect, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c courseSelectDo) FindInBatches(result *[]*model.CourseSelect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c courseSelectDo) Attrs(attrs ...field.AssignExpr) ICourseSelectDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c courseSelectDo) Assign(attrs ...field.AssignExpr) ICourseSelectDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c courseSelectDo) Joins(fields ...field.RelationField) ICourseSelectDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c courseSelectDo) Preload(fields ...field.RelationField) ICourseSelectDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c courseSelectDo) FirstOrInit() (*model.CourseSelect, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSelect), nil
	}
}

func (c courseSelectDo) FirstOrCreate() (*model.CourseSelect, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSelect), nil
	}
}

func (c courseSelectDo) FindByPage(offset int, limit int) (result []*model.CourseSelect, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c courseSelectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c courseSelectDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c courseSelectDo) Delete(models ...*model.CourseSelect) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *courseSelectDo) withDO(do gen.Dao) *courseSelectDo {
	c.DO = *do.(*gen.DO)
	return c
}
