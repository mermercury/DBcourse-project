// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Admin        *admin
	Class        *class
	Course       *course
	CourseSelect *courseSelect
	Department   *department
	Major        *major
	Student      *student
	Teacher      *teacher
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	Class = &Q.Class
	Course = &Q.Course
	CourseSelect = &Q.CourseSelect
	Department = &Q.Department
	Major = &Q.Major
	Student = &Q.Student
	Teacher = &Q.Teacher
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Admin:        newAdmin(db, opts...),
		Class:        newClass(db, opts...),
		Course:       newCourse(db, opts...),
		CourseSelect: newCourseSelect(db, opts...),
		Department:   newDepartment(db, opts...),
		Major:        newMajor(db, opts...),
		Student:      newStudent(db, opts...),
		Teacher:      newTeacher(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin        admin
	Class        class
	Course       course
	CourseSelect courseSelect
	Department   department
	Major        major
	Student      student
	Teacher      teacher
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Admin:        q.Admin.clone(db),
		Class:        q.Class.clone(db),
		Course:       q.Course.clone(db),
		CourseSelect: q.CourseSelect.clone(db),
		Department:   q.Department.clone(db),
		Major:        q.Major.clone(db),
		Student:      q.Student.clone(db),
		Teacher:      q.Teacher.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Admin:        q.Admin.replaceDB(db),
		Class:        q.Class.replaceDB(db),
		Course:       q.Course.replaceDB(db),
		CourseSelect: q.CourseSelect.replaceDB(db),
		Department:   q.Department.replaceDB(db),
		Major:        q.Major.replaceDB(db),
		Student:      q.Student.replaceDB(db),
		Teacher:      q.Teacher.replaceDB(db),
	}
}

type queryCtx struct {
	Admin        IAdminDo
	Class        IClassDo
	Course       ICourseDo
	CourseSelect ICourseSelectDo
	Department   IDepartmentDo
	Major        IMajorDo
	Student      IStudentDo
	Teacher      ITeacherDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:        q.Admin.WithContext(ctx),
		Class:        q.Class.WithContext(ctx),
		Course:       q.Course.WithContext(ctx),
		CourseSelect: q.CourseSelect.WithContext(ctx),
		Department:   q.Department.WithContext(ctx),
		Major:        q.Major.WithContext(ctx),
		Student:      q.Student.WithContext(ctx),
		Teacher:      q.Teacher.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
